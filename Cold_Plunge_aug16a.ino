// #include <EmonLib.h>
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/60720913-b53e-4844-a619-2fff14b3b990 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float flowRate;
  int flowState;
  CloudTime cloud_time_read;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

const int RELAY_BASE = 4;      // The first relay is connected to digital pin 4
const int RELAY_NUM = 4;       // Total number of relays
const int RELAY_DELAY = 4000;  // Total seconds between relay changes
const int FLOW_PIN = 3;        // Pin for yellow flow meter
const int ANALOG_CURRENT_PIN = A0;

// EnergyMonitor emon1;
const int numReadings = 30;      // number of samples for rolling average
int readings[numReadings];       // array to store the readings
int readIndex = 0;               // current index in the array
long total = 0;                  // sum of readings
int average = 0;

// Method to return Freq for flow counter
float getFrequency(int pin) {
  unsigned long highTime = pulseIn(pin, HIGH);
  unsigned long lowTime = pulseIn(pin, LOW);
  unsigned long period = highTime + lowTime;  // total time in microseconds
  if (period == 0) return 0;  // protect against divide by zero errors
  return 1000000.0 / period;  // frequency in hertz
}

// Convert frequency counter to gallons per minute
float getGalPerMin(float frequency) {
  // According to specs, 1380 clicks corresponds to a gallon of water
  return frequency / 1380 * 60;
}

float getCurrent(int pin) {
  int sensorValue = analogRead(pin);
  float voltage = sensorValue * (5.0/1023.0);  // Convert ADC value to voltage
  float current = voltage / 0.185;              // Example adjustment
  Serial.print("Sensor: ");
  Serial.print(sensorValue); 
  Serial.print(" / Voltage: ");
  Serial.print(voltage);
  Serial.print(" / Current: ");
  Serial.print(current);
  Serial.println(" A");
  return current;
}

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
 
  // Set Relay Pins as Outputs
  for (int i = RELAY_BASE; i < RELAY_BASE + RELAY_NUM; i++) {
    pinMode(i, OUTPUT);
  }

  // Set the flow rate for HA-1045 flow meter: 
  // https://h2oprotech.com/pages/contact
  // https://cdn.shopify.com/s/files/1/2175/6387/files/Slide1_c7a65e47-8a9a-493c-8941-cec6dc977bc2.JPG?4198946978217586654
  // pinMode(FLOW_PIN, INPUT);
  pinMode(ANALOG_CURRENT_PIN, INPUT);

  // Turn all relays ON sequentially
  digitalWrite(7, HIGH);

  for (int i = 0; i < numReadings; i++) {
    readings[i] = 0;
  }
  
  // for (int i = RELAY_BASE; i < RELAY_BASE + RELAY_NUM; i++) {
  //   digitalWrite(i, HIGH);
  //   Serial.print("Turning on pin ");
  //   Serial.println(i);
  //   delay(RELAY_DELAY);
  // }

  
}

void loop() {
  ArduinoCloud.update();
  // Your code here 

  // // Turn on relay 4
  // digitalWrite(4, HIGH);

  // Turn all relays OFF sequentially
  // for (int i = BASE; i < BASE + NUM; i++) {
  //   digitalWrite(i, LOW);
  //   delay(DELAY); // 0.2 seconds delay
  // }
  
  
  // float freq = getFrequency(FLOW_PIN);
  // flowRate = getGalPerMin(freq);
  // Serial.print("Frequency: ");
  // Serial.print(freq);
  // Serial.print(" Hz => ");
  // Serial.print(flowRate);
  // Serial.println(" Gal/Min");

  // subtract the oldest reading
  total -= readings[readIndex];
  // read from the sensor
  readings[readIndex] = analogRead(ANALOG_CURRENT_PIN);
  // add the new reading
  total += readings[readIndex];
  // advance to the next position
  readIndex = (readIndex + 1) % numReadings;
  // calculate the average
  average = total / numReadings;

  Serial.print("Rolling average: ");
  Serial.print(average);


  float voltage = average * (5.0/1023.0);  // Convert ADC value to voltage
  float current = voltage / 0.185;              // Example adjustment
  Serial.print(" / Voltage: ");
  Serial.print(voltage);
  Serial.print(" / Current: ");
  Serial.print(current);
  Serial.println(" A");
  
  delay(200);

  
  // float cur = getCurrent(ANALOG_CURRENT_PIN);

  // emon1.serialprint();
  
  // delay(100);


  
}


/*
  Since FlowState is READ_WRITE variable, onFlowStateChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFlowStateChange()  {
  // Add your code here to act upon FlowState change
}

